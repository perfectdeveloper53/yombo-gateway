#!/usr/bin/env bash

# a basic wrapper around the yombo.tac (yombo service).

if [ "$USER" = "root" ] && [ "$SUDO_USER" == "" ]; then
  echo "This script cannot be run as root directly and must be run"
  echo "as the user owning the Yombo gateway service."
  echo ""
  echo "Logout as root and then:"
  echo "sudo ybo"
  exit
fi

if [ "$SUDO_USER" != "" ]; then
  REALUSER=$SUDO_USER
else
  REALUSER=$USER
fi
SCRIPTPATH="$(dirname "$(readlink -f "$0")")"
rc=$?
if [[ $rc != 0 ]]; then
 SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
fi
WORK_DIR="$HOME/.yombo"
LOGCFGFILE=$WORK_DIR/log/config.log
LOGFILE=$WORK_DIR/log/service.log

function usage()
{
  printf "usage: ybo [options...]\\n"
  printf "'ybo -help' to see all options\\n"
  return 0
}

function help()
{
cat << EOF
Manage and run the Yombo Gateway software

If no options are provided, starts the Yombo software in interactive mode.

ybo [-option(s)]

OPTIONS:
  -debug [items]      Turn on debug mode.
  -h, -help           Show this message
  -logfile FILE       Change log file location
  -motd               Show MOTD / URL status
  -profiler           Enable profiling to profile.out
  -pid_path PATH      Set the pid path location
  -pid_file FILE      Set the pid path filename
  -daemon              Start Yombo service (called by system to start the daemon)
  -status             Show the status of the Yombo service
  -urls               Show URLs to access Yombo Gateway.
  -working-dir DIR    Set data storage directory
  -version            Show version

Examples:
  Debugging:
    Turn on debug with with optional selection of what items to debug. The
    items list can be * for all, or a comma separated list of items such as:
    --debug yombo.lib.*,yombo.modules.mymodule.*

Additional Yombo Tools:
  ybo-config - Configure Yombo Gateway service for '$REALUSER'

EOF
}

function show_status()
{
    if [ "$SHOW_STATUS" == "true" ]; then
      if [ -e $PID_PATH/$PID_FILE ]; then
        mypid=`cat $PID_PATH/$PID_FILE`
        if kill -0 &>1 > /dev/null $mypid; then
          echo "Yombo gateway appears to be running with pid: $mypid"
          echo ""
          $SCRIPTPATH/scripts/show_motd
          exit 1
        fi
        echo "Yombo gateway is not running."
      fi
      exit 1
    fi
}


#Base vars
DAEMON=0
DEBUG=false
DEBUG_ITEMS=*
LOGENABLE=0
PID_PATH=$HOME/.yombo
PID_FILE=yombo.pid
TACFILE=$SCRIPTPATH/yombo.tac
SHOW_STATUS=false
TACFILE="$SCRIPTPATH/yombo.tac"

ARGUMENTS=

while true; do
  case "$1" in
#    -m | --memory ) MEMORY="$2"; shift 2 ;;

    -daemon)
      # Run as daemon (used by systemd)
      DAEMON=1
      shift
      ;;
    -debug )
      ARGUMENTS="$ARGUMENTS -debug"
      if [[ "$2" != \-* ]]; then
        ARGUMENTS="$ARGUMENTS --debug-items $2"
        shift
      fi
      shift ;;
    -disable )
      systemctl disable yombo
      exit 1
      shift ;;
    -enable )
      systemctl enable yombo
      exit 1
      shift ;;
    -h | --help | -? )
      usage
      exit 1
      ;;
    -logfile)
      # Change log file location
      shift
      LOGFILE=$1
      shift
      ;;
    -motd )
      # Show yombo motd
      $SCRIPTPATH/scripts/show_motd
      exit 1
      ;;
    -pid_path)
      shift
      PID_PATH=$1
      shift
      ;;
    -pid_file)
      shift
      PID_FILE=$1
      shift
      ;;
    -profiler)
      # Enable profiling
      echo "enabling profiler"
      ARGUMENTS="$ARGUMENTS --savestats --profiler cprofile -n --profile prof.stats"
      ;;
    -stop)
      # stop yombo service
      echo "Request Yombo stop"
      service stop yombo
      exit 1
      ;;
    -status)
      show_status
      exit 1
      ;;
    -tacfile)
      # Change TAC file location
      shift
      TACFILE=$1
      shift
      ;;
    -urls)
      # Show yombo urls
      $SCRIPTPATH/scripts/show_urls
      exit 1
      ;;
    -version)
      # Show version of yombo.
      $SCRIPTPATH/scripts/show_version
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo "For help: $0 -h" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
    * ) break ;;
  esac
done

#Check if PID is running, if it is, then exit gracefully.
if [ -e $PID_PATH/$PID_FILE ]; then
    mypid=`cat $PID_PATH/$PID_FILE`
  if kill -0 &>1 > /dev/null $mypid; then
    echo "Yombo Gateway already running with pid: $mypid"
    exit 1
  fi
fi

#YOMBO_SERVICE="echo \"$ARGUMENTS\" | twistd --pidfile=$PID_PATH/$PID_FILE"
TACOPTIONS="--pidfile=$PID_PATH/$PID_FILE -n -y $TACFILE"

if [ $DAEMON -eq "1" ]; then
    YOMBO_SERVICE="echo \"$ARGUMENTS\" | $SCRIPTPATH/yombo_tac.sh $TACOPTIONS --logfile=$LOGFILE &"
    eval $YOMBO_SERVICE
    exit 0
else
    YOMBO_SERVICE="echo \"$ARGUMENTS\" | twistd $TACOPTIONS"
    cd $SCRIPTPATH
    export SSL_CERT_FILE="$(python -m certifi)"

    echo "checking pyenv"
    #Check if pyenv is being used and isn't loaded...
    if [ -f ".python-version" ] ; then
      if ! [ -x "$(command -v pyenv)" ]; then
        echo "Yombo.sh setting up pyenv"
        export PATH="~/.pyenv/bin:$PATH"
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
      fi
    fi

   echo "starting daemon! $YOMBO_SERVICE"
#   eval $YOMBO_SERVICE
#   ps aux | grep twis
#   exit 1
fi

while :
do
  eval $YOMBO_SERVICE
  OUT=$?
  if [ $OUT -le "126" ]; then
    # Gateway died for some reason or was told to quit, so, lets exit!
    exit $OUT
  fi
done
