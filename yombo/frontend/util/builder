#!/usr/bin/env bash

# This file starts up the dev build process. Usually called by 'npm run dev'
#
# The difference: This collects all the frontend components into a single
# place: '$working_dir'/var/frontend
#
# From here, npm will actually run.

YOMBO_SCRIPT_FRONTEND_UTILS="$( cd "$(dirname "$0")" ; pwd -P )"
YOMBO_SCRIPT_FRONTEND="$(dirname $YOMBO_SCRIPT_FRONTEND_UTILS)"
YOMBO_ROOT="$(dirname $YOMBO_SCRIPT_FRONTEND)"
YOMBO_ROOT="$(dirname $YOMBO_ROOT)"

function copy_files {
  # Copies all the files from the core frontend and the modules

  echo "Copying frontend core directory..."
  rsync -a --delete --exclude "/.nuxt/" --exclude "/dist/" "$YOMBO_SCRIPT_FRONTEND"/ ~/.yombo/var/frontend/

  echo "Copying frontend files from various modules..."
  cd "$YOMBO_ROOT"/yombo/modules

  for d in **/*frontend*/; do rsync -a $d ~/.yombo/var/frontend/ ; done
}

function setup_watch_files {
  # Watches all frontend source locations for changes, and then copies them
  # to ~/.yombo/var/frontend where npm and act on them.

  echo "Setting watch & sync."
  cd $YOMBO_ROOT

  inotifywait -m -r -e modify -e moved_to -e close_write --exclude "___jb_" --exclude yombo/frontend/node_modules/ --format "%w%f" yombo/frontend/ yombo/modules/ |
  while read -r filename; do
    if [[ $filename =~ yombo/modules/.*/frontend/ || $filename =~ yombo/frontend ]] && [[ ! $filename =~ .*___jb.* ]]; then
      while [[ $filename =~ .*/frontend/.* ]]
      do
        filename="$(dirname $filename)"
      done
      rsync -a --exclude "/.nuxt/" --exclude "/dist/" "$filename"/ ~/.yombo/var/frontend
    fi
  done
}

function ctrl_c() {
  # Watch for ctrl-c, then stop all running tasks

  echo
  echo "Stopping Frontend watches."
  kill $WATCHFILES >/dev/null 2>&1
  kill $BUILDFRONTEND >/dev/null 2>&1
  rm $YOMBO_SCRIPT_FRONTEND_UTILS/builder.pid

}

function build_dev {
  # Builds the frontend for development
  echo
  echo "Starting Yombo Frontend Dev Build."
  echo

  copy_files

  # trap ctrl-c and call ctrl_c()
  trap ctrl_c INT

  setup_watch_files &
  WATCHFILES=$!

  cd ~/.yombo/var/frontend/
  npm run build_dev &
  BUILDFRONTEND=$!

  FAIL=0
  for job in `jobs -p`
  do
      wait $job >/dev/null 2>&1 || let "FAIL+=1" >/dev/null 2>&1
  done
  sleep 1
}

function build_prod {
  # Builds the frontend for production
  echo
  echo "Starting Yombo Frontend Production Build."
  echo

  copy_files
  cd ~/.yombo/var/frontend/
  npm run build_prod
}

function usage
{
  printf "usage: rundev dev   or   rundev prod\\n"
  return 0
}

if [ $# -lt 1 ]; then
  usage
  exit 0
fi

if test -f "$YOMBO_SCRIPT_FRONTEND_UTILS/builder.pid"; then
  builder_pid="`cat $YOMBO_SCRIPT_FRONTEND_UTILS/builder.pid`"
  echo "frontend builder is already running: $builder_pid"
  exit
fi

echo "$BASHPID" > $YOMBO_SCRIPT_FRONTEND_UTILS/builder.pid

while true; do
  case "$1" in
    "dev")
      build_dev
      exit
      ;;
    "prod")
      build_prod
      exit
      ;;
    * ) usage ; break ;;
  esac
done
