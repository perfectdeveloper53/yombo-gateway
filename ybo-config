#!/usr/bin/env bash
# Yombo gateway configuration helper

if [ "$USER" = "root" ] && [ "$SUDO_USER" == "" ]; then
  echo "This script cannot be run as root directly and must be run"
  echo "as the user owning the Yombo gateway service."
  echo ""
  echo "Logout as root and then:"
  echo "sudo ybo-config"
  exit
fi

if [ "$SUDO_USER" != "" ]; then
  REALUSER=$SUDO_USER
else
  REALUSER=$USER
fi
SCRIPTPATH="$(dirname "$(readlink -f "$0")")"
rc=$?
if [[ $rc != 0 ]]; then
 SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
fi
WORK_DIR="$HOME/.yombo"
LOGFILE=$WORK_DIR/log/config.log
LOGYBOFILE=$WORK_DIR/log/service.log
VERSION="$($SCRIPTPATH/scripts/show_version)"

# Configurable options
ACCEPT="false"
FORCE="false"

YOMBOVERSION=$($SCRIPTPATH/scripts/show_version)
YOMBOVERSIONHASH=$(git -C "$SCRIPTPATH" log --pretty=format:'%h' -n 1)
YOMBOFULLVERSION="$YOMBOVERSIONHASH-$YOMBOVERSION"

function logonly {
  echo "[$(date +'%D %T')] [$YOMBOFULLVERSION] [$1] $2" >> "$LOGFILE"
  if [ "$SUDO_USER" != "" ]; then
    chown "$REALUSER":"$REALUSER" "$LOGFILE"
  fi
}

function log {
  echo "$2"
  echo "[$(date +'%D %T')] [$YOMBOFULLVERSION] [$1] $2" >> "$LOGFILE"
  if [ "$SUDO_USER" != "" ]; then
    chown "$REALUSER":"$REALUSER" "$LOGFILE"
  fi
}

function info {
  log "info" "$1"
}

function warning {
  log "warning" "$1"
}

function error {
  log "error" "$1"
}

function need_sudo {
  if (( EUID != 0 ))
  then
    echo "Error: ybo-config must be run as root (with sudo) for this request."
    echo "Hint: Run the same same command again with 'sudo' in front."
    exit 1
  fi
  return 0
}

function usage {
  printf "usage: ybo-config [command] [options...]\\n"
  printf "'ybo-config help' to see all options\\n"
  exit 0
}

function help {
cat << EOF
Yombo gateway configuration and setup helper.
ybo-config    version: $VERSION

usage: ybo-config command [options...]

COMMANDS:
  help, -?,      Show this text
    -h, --help

  disable        Disable Yombo service, prevents Yombo from ruinning on system startup.
  enable         Enable Yombo service, configures Yombo to run on system startup.
  sudoers        Manage sudoers control file for user: '$REALUSER'
                 Options: 'install' to install sudoers file, or 'remove'.
  update         Upgrade the operating system with 'apt update && apt upgrade'. Also
                 updates Yombo Gateway software and its dependants.
  version        Set the Yombo gateway source code branch. **Advanced users only**
                 Option: The version name, eg: master, develop, tagname
  install-bash   Install bash completion scripts.
  log-cfg-clear  Clear configuration log.
  log-ybo-clear  Clear configuration log.
  log-cfg-show   Show configuration log.
  log-ybo-show   Show Yombo service log.
  log-cfg-share  Share configuration log.
  log-ybo-share  Share configuration log.

Additional options:
  -Y, --accept   Always accept prompts.

Additional Yombo Tools:
  ybo - manage Yombo gateway service for '$REALUSER'
EOF
}

function run_command {
  echo "------ STARTING EXTERNAL PROGRAM ------" >> "$LOGFILE"
  echo "$1" >> "$LOGFILE"
  echo "------ STARTING LOG ------" >> "$LOGFILE"
  $1 2>&1 | tee -a "$LOGFILE"
  echo "------ FINISHED EXTERNAL PROGRAM ------" >> "$LOGFILE"
  return 0
}

function check_systemd
{
  need_sudo
  if [ ! -f /etc/systemd/system/yombo_$REALUSER.service ]; then
    if [ "$ACCEPT" == "true" ]; then
      warning "Systemd service control file is missing."
      create_systemd
      return 0
    else
        while true; do
            read -p "Systemd service control file is missing, do you want to create it? (y/n)" yn
            case $yn in
                [Yy]* )
                  create_systemd
                  return 0
                  break;;
                [Nn]* )cd m
                  echo "Not creating system control file, Yombo will not run automatically."
                  exit 0;;
                * )
                  echo "Please answer y (yes) or n (no)."
                  echo "" ;;
            esac
        done
    fi
  fi
}

function create_systemd
{
  need_sudo
  info "Creating systemd service control file. This will tell your system how"
  info "to start Yombo Gateway when your device starts up."
  cat <<- EOF > /etc/systemd/system/yombo_$REALUSER.service
# This file is managed by yombo, use ybo-config to update.

[Unit]
Description=Yombo Home Automation software for user: $REALUSER
Wants=network.target

[Service]
User=$REALUSER
Group=$REALUSER
WorkingDirectory=/home/$REALUSER/.yombo/
PIDFile=/home/yombo/.yombo/yombogateway.pid
#ExecStartPre=/bin/bash --login -c 'env > /tmp/.yombo-magic-environment-file'
ExecStart=ybo daemon
ExecStop=/bin/kill -s SIGINT \$MAINPID
#EnvironmentFile=-/tmp/.yombo-magic-environment-file

[Install]
WantedBy=multi-user.target

EOF
    chmod 440 /etc/sudoers.d/yombo_$REALUSER
    info "Systemd service control file created."
    return 0
}


function disable_yombo
{
  need_sudo

  info "About to disable systemd control Yombo Gateway for user: $REALUSER"
  run_command "systemctl disable yombo_$REALUSER"
  info "Yombo has been disabled for startup for user: $REALUSER"
  exit 0
}


function enable_yombo
{
  need_sudo
  check_systemd
  info "About to enable systemd control Yombo Gateway for user: $REALUSER"
  run_command "systemctl enable yombo_$REALUSER"
  info "Yombo has been enabled for startup for user: $REALUSER"
  exit 0
}


function do_sudoers
{
  need_sudo

  if [ "$SUDOERSMODE" == "install" ]; then
    info "Updating/creating sudoers file for: $REALUSER"
    cat <<- EOF > /etc/sudoers.d/yombo_$REALUSER
# This file is managed by yombo, use ybo-config to update.

%$REALUSER ALL=NOPASSWD: /bin/systemctl enable yombo_$REALUSER.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl disable yombo_$REALUSER.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl start yombo_$REALUSER.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl stop yombo_$REALUSER.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl restart yombo_$REALUSER.service
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo_$REALUSER enable
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo_$REALUSER disable
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo_$REALUSER start
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo_$REALUSER stop
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo_$REALUSER restart
%$REALUSER ALL=NOPASSWD: /bin/systemctl enable mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl disable mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl start mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl stop mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl restart mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl kill -s HUP mosquitto.service
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto enable
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto disable
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto start
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto stop
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto restart
EOF
    chmod 440 /etc/sudoers.d/yombo_$REALUSER
  elif [ "$SUDOERSMODE" == "remove" ]; then
    info "Removing sudoers file for: $REALUSER"
    rm /etc/sudoers.d/yombo_$REALUSER
  else
    echo "'install' or 'remove' must be supplied with 'sudoers'."
    echo "Example: 'sudo ybo-config sudoers install'"
    exit 1
  fi
}

function clear-log {
  if [ ! -f $SHARELOG ];then
    echo "Logfile '$SHARELOG' not found, exiting..."
    return 0
  fi
  if [ "$ACCEPT" == "true" ]; then
    rm $SHARELOG
    echo "Log file deleted: $SHARELOG"
  else
    echo ""
    echo "About to delete: $SHARELOG"
    echo ""
    echo -n "Are you sure you want to permanently delete this log file? [N/y] : "
    read -r  RESPONSE
    if [ "$RESPONSE" == "y" ] || [ "$RESPONSE" == "Y" ]; then
    rm $SHARELOG
    echo "Log file deleted: $SHARELOG"
    fi
  fi
  return 0
}

function share-log {
  if [ ! -f $SHARELOG ];then
    echo "Logfile '$SHARELOG' not found, exiting..."
    return 0
  fi
  if [ "$ACCEPT" == "true" ]; then
    info "Sharing '$SHARELOG' to Hastebin"
    loglink=$(curl -X POST -s -d "$(cat "$SHARELOG")" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}')
    if [[ $loglink != *"initial"*  ]]; then
      info "Hastebin link: $loglink"
    else
      info "Unable to post to Hastebin, unreachable. Try later or check your network connection."
      return 0
    fi
  else
    echo "This will upload the contents of this log file: $SHARELOG"
    echo "This could include sensitive information."
    echo "If you are unsure about what it contains, you can run 'ybo-config cfg-log|ybo-log' to check."
    echo -n "Are you sure you want to upload this publicly to Hastebin? [N/y] : "
    read -r  RESPONSE
    if [ "$RESPONSE" == "y" ] || [ "$RESPONSE" == "Y" ]; then
      info "Sharing '$SHARELOG' to Hastebin"
      loglink=$(curl -X POST -s -d "$(cat "$SHARELOG")" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}')
      if [[ $loglink != *"initial"*  ]]; then
        info "Hastebin link: $loglink"
      else
        echo
        info "Unable to post to Hastebin, unreachable. Try later or check your network connection."
        return 0
      fi
    fi
  fi
  return 0
}

function share-log {
  if [ ! -f $SHARELOG ];then
    echo "No log entries found."
    return 0
  fi
  more "$SHARELOG"
  return 0
}

function do_update {
  need_sudo
  info "Calling yombo_update to update the system and Yombo Gateway software."
  run_command "sudo -H -u $SUDO_USER sudo bash $SCRIPTPATH/scripts/yombo_update yombo_update"
  info "Finised with system and Yombo Gateway software update."
  return 0
}

function update {
  need_sudo
  info "hello asdf"
  if [ "$ACCEPT" == "true" ]; then
    do_update
    echo "Log file deleted: $SHARELOG"
  else
    echo ""
    echo "About to update the operating system, Yombo Gateway, and it's dependencies."
    echo ""
    echo -n "Are you sure you want to complete this task? [N/y] : "
    read -r  RESPONSE
    if [ "$RESPONSE" == "y" ] || [ "$RESPONSE" == "Y" ]; then
        do_update
    fi
  fi
  return 0
}

function install-bash-completion {
  need_sudo
  info "Starting bash completion setup."
  logonly "Starting to instasll /etc/bash_completion.d/ybo-cfg"
  cat <<- EOF > //etc/bash_completion.d/ybo-config
# This file is managed by yombo, use ybo-config to update.

_ybo-config()
{
    local cur prev opts cmdopts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="install-bash disable enable sudoers update version log-cfg-clear log-ybo-clear log-cfg-show log-ybo-show log-cfg-share log-ybo-share help"
    altopts="--accept --help"

    if [[ \${cur} == -* ]] ; then
      COMPREPLY=( \$(compgen -W "\${altopts}" -- \${cur}) )
      return 0
    fi

    COMPREPLY=(\$(compgen -W "\${opts}" -- \${cur}))
    return 0
}
complete -F _ybo-config ybo-config
EOF
  logonly "info" "Done with /etc/bash_completion.d/ybo-cfg"
  . /etc/bash_completion.d/ybo-config
  logonly "info" "Starting to instasll /etc/bash_completion.d/ybo-cfg"
  cat <<- EOF > //etc/bash_completion.d/ybo
# This file is managed by yombo, use ybo-config to update.

_ybo()
{
    local cur prev opts cmdopts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="help -help motd daemon start stop urls version -debug -logfile -profiler -pid_path -pid_file -working_dir -version"
    altopts="--accept --help"

    if [[ \${cur} == -* ]] ; then
      COMPREPLY=( \$(compgen -W "\${altopts}" -- \${cur}) )
      return 0
    fi

    COMPREPLY=(\$(compgen -W "\${opts}" -- \${cur}))
    return 0
}
complete -F _ybo ybo
EOF
  logonly "info" "Done with /etc/bash_completion.d/ybo"
  . /etc/bash_completion.d/ybo
  info "Done with bash completion setup."
  echo ""
  echo "You will need to run these commands to make it work with current session:"
  echo ". /etc/bash_completion.d/ybo"
  echo ". /etc/bash_completion.d/ybo-config"
  echo ""
  . /etc/bash_completion.d/ybo-config
}


if [ $# -lt 1 ]; then
  usage
  exit 0
fi

while [[ $# -gt 0 ]]
do
    COMMAND=$1

    case $COMMAND in
      "disable" )
        RUN="disable_yombo"
        shift
        ;;
      "enable" )
        RUN="enable_yombo"
        shift
        ;;

      "-H" | "--help" | "--help" | "-h" | "-?" )
        RUN="help"
        shift # past argument
        ;;

      "help" )
        help
        exit 0
        ;;

      "sudoers" )
        RUN="do_sudoers"
        SUDOERSMODE=$2
        shift # pass command
        shift # pass sudoers mode
        ;;

      "log-cfg-clear" )
        SHARELOG="$LOGFILE"
        RUN="clear-log"
        shift # past argument
        ;;

      "log-ybo-clear" )
        SHARELOG="$LOGFILE"
        RUN="clear-log"
        shift # past argument
        ;;

      "log-cfg-show" )
        SHARELOG="$LOGFILE"
        RUN="show-log"
        shift # past argument
        ;;

      "log-ybo-show" )
        SHARELOG="$LOGYBOFILE"
        RUN="show-log"
        shift # past argument
        ;;

      "log-cfg-share")
        SHARELOG="$LOGFILE"
        RUN="share-log"
        shift # pass command
        ;;

      "log-ybo-share")
        SHARELOG="$LOGYBOFILE"
        RUN="share-log"
        shift # pass command
        ;;

      "install-bash")
        RUN="install-bash-completion"
        shift # pass command
        ;;

      "update")
        RUN="update"
        shift # pass command
        ;;

      "version")
        echo "Yombo version: $YOMBOVERSION, git hash: $YOMBOVERSIONHASH"
        exit 0
        ;;

      # Now the options!
      "-Y"|"-y"|"--accept")
        ACCEPT="true"
        shift # pass command
        ;;

      "-F"|"-f"|"--force")
        FORCE="true"
        shift # pass command
        ;;

      * )
        usage
        exit 0
        ;;
    esac
done

if [ "$RUN" != "" ]; then
#  echo "About to run $RUN"
  $RUN
  exit 0
fi
