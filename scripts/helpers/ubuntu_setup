#!/usr/bin/env bash
# This script setup's the gateway to run on an Ubuntu installation.
#
# This script configures apt to use NPM version 10.
#
# This also ensures the system software is upto date by running apt-get upgrade.
#
# To use, first goto a directory where 'yombo-gateway' gateway will be created.
# Then:
# git clone https://github.com/yombo/yombo-gateway.git
# cd yombo-gateway/scripts
# ./ubuntu_setup

if [ "$USER" = "root" ] && [ "$SUDO_USER" == "" ]; then
  echo "This script cannot be run as root directly and must be run"
  echo "as the user owning the Yombo gateway service."
  echo ""
  echo "Logout as root and rerun this script:"
  echo "sudo ./ubuntu_setup"
  exit
fi

if [ "$(id -u)" -ne 0 ]; then
  echo "This script must run with sudo to gain root access. This"
  echo "is needed to install the latest updates. Run this the user"
  echo "owning the Yombo gateway service:"
  echo ""
  echo "Rerun this script:"
  echo "sudo ./ubuntu_setup"
  echo ""
  exit
fi

if [ "$1" != "vagrant" ]; then
    echo "This will install various requirements to run Yombo Gateway."
    echo ""
    echo "This will also perform the following tasks:"
    echo "1) Install dependencies through apt-get"
    echo "2) Install pyenv or update pyenv"
    echo "3) Install the latest python 3.7.x into pyenv"
    echo "4) Update system pip3 installer to latest version."
    echo "5) Download and compile mosquitto and libwebsockets."
    echo "6) Setup apt to use NPM version 10."
    echo ""
    echo "This will take a while due to compiling the needed requirements."
    echo ""
    while true; do
        read -p "Do you wish to complete this? (y/n): " yn
        case $yn in
            [Yy]* ) break;;
            [Nn]* ) exit;;
            * ) echo "Please answer y (yes) or n (no).";;
        esac
    done

    echo ""

    secs=$((5))
    while [ $secs -gt 0 ]; do
       echo -ne "Will continue in $secs.  Ctrl-c to abort.\033[0K\r"
       sleep 1
       : $((secs--))
    done
fi

YOMBO_SCRIPT_HELPER_DIR="$( cd "$(dirname "$0")" ; pwd -P )"
YOMBO_SCRIPT_DIR="$(dirname $YOMBO_SCRIPT_HELPER_DIR)"
YOMBO_ROOT_DIR="$(dirname $YOMBO_SCRIPT_DIR)"

touch /home/$SUDO_USER/yombo_setup.log
chown $SUDO_USER:$SUDO_USER /home/$SUDO_USER/yombo_setup.log

touch /home/$SUDO_USER/yombo_setup_detailed.log
chown $SUDO_USER:$SUDO_USER /home/$SUDO_USER/yombo_setup_detailed.log

mkdir /home/$SUDO_USER/.yombo
mkdir /home/$SUDO_USER/.yombo/log
chown -R $SUDO_USER:$SUDO_USER /home/$SUDO_USER/.yombo

LOGFILE=/home/$SUDO_USER/yombo_setup.log
LOGFILEDETAILED=/home/$SUDO_USER/yombo_setup_detailed.log
echo ""
echo "The log file for these changes will be available at: $LOGFILE";
echo "Detailed logs can be found: $LOGFILEDETAILED";
echo ""
echo "You can monitor the details log from another terminal: tail -f $LOGFILEDETAILED"
echo ""
function logsetup {
#    TMP=$(tail -n $RETAIN_NUM_LINES $LOGFILE 2>/dev/null) && echo "${TMP}" > $LOGFILE
    exec > >(tee -a $LOGFILE $LOGFILEDETAILED)
    exec 2>&1
}

function log {
    echo "[$(date --rfc-3339=seconds)]: $*"
}
logsetup

log "==> Checking if apt is locked..."
if [[ $(sudo lsof /var/lib/dpkg/lock 2>/dev/null) ]]; then
    log "==> It appears the apt/dpkg is locked. Try later."
    sudo lsof /var/lib/dpkg/lock 2>/dev/null
    echo ""
    exit
fi

log "==> Installing curl and wget."

apt-get install wget curl -y >> $LOGFILEDETAILED 2>&1

log "==> Configuring apt for NodeJS to use version 10."

wget https://deb.nodesource.com/setup_10.x -O - | sudo -E bash - >> $LOGFILEDETAILED 2>&1

sudo apt-mark hold keyboard-configuration >> $LOGFILEDETAILED 2>&1
sudo apt-mark hold grub-pc >> $LOGFILEDETAILED 2>&1
log "==> Doing auto-remove to speed things up."
apt-get autoremove -y >> $LOGFILEDETAILED 2>&1
log "==> Upgrading OS (apt-get upgrade) - starting downloads"
apt-get upgrade --download-only -y >> $LOGFILEDETAILED 2>&1
log "==> Upgrading OS (apt-get upgrade) - starting installation, this will take a few minutes"
apt-get upgrade -y >> $LOGFILEDETAILED 2>&1
sudo apt-mark unhold keyboard-configuration >> $LOGFILEDETAILED 2>&1
sudo apt-mark unhold grub-pc >> $LOGFILEDETAILED 2>&1

log "==> Starting requirements installation. This can take few minutes."
log "==> agt-get - Starting downloads, speed depends on your internet connection speed."
apt-get install --download-only -y make g++ build-essential cmake git sqlite3 ntp daemon quilt \
dirmngr xz-utils rng-tools gnupg2 llvm expect uuid-dev mosquitto libmosquitto-dev \
libbluetooth3 libbluetooth-dev liblzma-dev libncurses5 libncursesw5 tk-dev \
libudev-dev libssl-dev zlib1g-dev libbz2-dev \
libreadline6-dev libreadline-dev libsqlite3-dev libexpat1-dev \
python3-dev libncursesw5-dev libyaml-dev  libncurses5-dev \
libcurl4-openssl-dev libc-ares-dev libavahi-compat-libdnssd-dev  \
libboost-thread-dev libglib2.0 libcairo2-dev python3-setuptools \
python3-pip >> $LOGFILEDETAILED 2>&1

log "==> agt-get - Starting installation."
apt-get install make g++ build-essential cmake git sqlite3 ntp daemon quilt \
dirmngr xz-utils rng-tools gnupg2 llvm expect uuid-dev mosquitto libmosquitto-dev \
libbluetooth3 libbluetooth-dev liblzma-dev libncurses5 libncursesw5 tk-dev \
python3-pip -y >> $LOGFILEDETAILED 2>&1

log "==> agt-get - About half way done."
apt-get install libreadline6-dev libreadline-dev libsqlite3-dev libexpat1-dev \
python3-dev libncursesw5-dev libyaml-dev libncurses5-dev \
libcurl4-openssl-dev libc-ares-dev libavahi-compat-libdnssd-dev  \
libboost-thread-dev libglib2.0 libcairo2-dev python3-setuptools \
libudev-dev libssl-dev zlib1g-dev libbz2-dev -y >> $LOGFILEDETAILED 2>&1

log "==> Installing nodejs and npm."
apt-get install nodejs -y >> $LOGFILEDETAILED 2>&1
apt-get install avahi-daemon -y >> $LOGFILEDETAILED 2>&1

log "==> Installing homebridge incase it's going to be used later"
npm install -g --unsafe-perm mdns >> $LOGFILEDETAILED 2>&1
npm install -g --unsafe-perm homebridge >> $LOGFILEDETAILED 2>&1

log "==> Upgrading system pip3"
pip3 install --upgrade pip & >> $LOGFILEDETAILED 2>&1

log "==> Adding correct user to dialout for serial/USB port access."
sudo usermod -a -G dialout $SUDO_USER  >> $LOGFILEDETAILED 2>&1

log "==> Installing mosquitto."
sudo apt-mark hold mosquitto >> $LOGFILEDETAILED 2>&1

cd /etc/mosquitto
sudo mkdir yombo
sudo chown $SUDO_USER yombo
if grep -Fxq "include_dir /etc/mosquitto/yombo" mosquitto.conf
then
    log "==> Mosquitto already configured for Yombo."
else
    echo "include_dir /etc/mosquitto/yombo" >> /etc/mosquitto/mosquitto.conf
fi

cd /usr/local/src
sudo mkdir yombo
sudo chown $SUDO_USER yombo
cd yombo

cd /usr/local/src/yombo
log "==> Downloading Mosquitto (MQTT) Source files."
git clone https://github.com/jpmens/mosquitto-auth-plug.git & >> $LOGFILEDETAILED 2>&1
git clone https://github.com/eclipse/mosquitto.git & >> $LOGFILEDETAILED 2>&1
git clone https://github.com/warmcat/libwebsockets.git >> $LOGFILEDETAILED 2>&1
log "==> Compiling libsockets."
cd libwebsockets
mkdir build
cd build
log "==> Configuring Mosquitto build"
cmake .. >> $LOGFILEDETAILED 2>&1
log "==> Compiling Mosquitto, give this a few moments."
make >> $LOGFILEDETAILED 2>&1
make install >> $LOGFILEDETAILED 2>&1
ldconfig

log "==> Compiling mosquitto auth plugin."
cd /usr/local/src/yombo/mosquitto-auth-plug
wget -O config.mk https://get.yombo.net/pibakery_files/mosquitto-auth.mk >> $LOGFILEDETAILED 2>&1
make >> $LOGFILEDETAILED 2>&1

log "==> Compiling mosquitto."
cd /usr/local/src/yombo/mosquitto
make binary WITH_WEBSOCKETS=yes WITH_DOCS=no CFLAGS=-I/usr/local/include/ >> $LOGFILEDETAILED 2>&1
log "==> Installing mosquitto."
make install WITH_WEBSOCKETS=yes WITH_DOCS=no CFLAGS=-I/usr/local/include/ >> $LOGFILEDETAILED 2>&1

log "==> Installing bin links to /etc/usr/local/bin"
ln -s $YOMBO_ROOT_DIR/ybo /usr/local/bin/ybo
ln -s $YOMBO_ROOT_DIR/ybo-config /usr/local/bin/ybo-config

log "==> Calling ybo-config to setup systemd and sudoers"
cd $YOMBO_ROOT_DIR
cd $YOMBO_ROOT_DIR
export RUNAS_USER=$SUDO_USER && $YOMBO_ROOT_DIR/ybo-config install